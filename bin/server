#!/usr/bin/env php
<?php

use App\Kernel;
use App\Server\Counter;
use App\Server\Driver;
use App\Server\ServerUtils;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use Swoole\Http\Request;
use Swoole\Http\Response;
use Swoole\Http\Server;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Debug\Debug;
use Symfony\Component\Dotenv\Dotenv;

set_time_limit(0);

require __DIR__ . '/../vendor/autoload.php';

if (!isset($_SERVER['APP_ENV'])) {
    if (!class_exists(Dotenv::class)) {
        throw new RuntimeException('APP_ENV environment variable is not defined. You need to define environment variables for configuration or add "symfony/dotenv" as a Composer dependency to load variables from a .env file.');
    }
    (new Dotenv())->load(__DIR__ . '/../.env');
}

$input = new ArgvInput();
$env = $input->getParameterOption(['--env', '-e'], $_SERVER['APP_ENV'] ?? 'dev');
$debug = ($_SERVER['APP_DEBUG'] ?? ('prod' !== $env)) && !$input->hasParameterOption(['--no-debug', '']);
$host = $input->getParameterOption(['--host'], $_SERVER['HOST'] ?? '127.0.0.1');
$port = (int) $input->getParameterOption(['--port', '-p'], $_SERVER['PORT'] ?? 9501);
$output = $input->getParameterOption(['--output', '-o'], 'php://stdout');
$requestLimit = (int) $input->getParameterOption(['--request-limit'], -1);
$profile = $debug || $input->hasParameterOption(['--enable-profiling']);

$logger = new Logger('swoole', [new StreamHandler($output)]);

if ($debug) {
    umask(0000);

    if (class_exists(Debug::class)) {
        Debug::enable();
    }
}

$server = new Server($host, $port, SWOOLE_BASE);
$kernel = new Kernel($env, $debug);
$driver = new Driver($kernel, $logger);

if ($profile) {
    $driver->enableProfiling();
}

$server->on('request', function (Request $request, Response $response) use ($driver) {
    $driver->handle($request, $response);
});

// stops server after certain requests / used for profiling
if ($requestLimit > 0) {
    $requestCounter = new Counter();
    $server->on('request', function (Request $request, Response $response) use ($driver, $requestCounter, $requestLimit, $server, $logger) {
        $driver->handle($request, $response);

        $requestCounter->increment();
        $current = $requestCounter->get();

        if (1 === $current) {
            $logger->info('First response has been sent', [
                'memory_usage'      => ServerUtils::formatBytes(ServerUtils::getMemoryUsage()),
                'memory_peak_usage' => ServerUtils::formatBytes(ServerUtils::getPeakMemoryUsage()),
            ]);
        }

        if ($requestLimit === $current) {
            $logger->info('Request limit has been hit. Closing connections..', [
                'memory_usage'      => ServerUtils::formatBytes(ServerUtils::getMemoryUsage()),
                'memory_peak_usage' => ServerUtils::formatBytes(ServerUtils::getPeakMemoryUsage()),
            ]);
            $server->stop();
        }
    });
}

$trustedHosts = ServerUtils::decodeStringAsSet($_SERVER['APP_TRUSTED_HOSTS']);
$trustedProxies = ServerUtils::decodeStringAsSet($_SERVER['APP_TRUSTED_PROXIES']);

$logger->info(\sprintf('Swoole HTTP Server started on http://%s:%d', $host, $port), [
    'env'               => $env,
    'debug'             => $debug ? 'true' : 'false',
    'profiling'         => $profile ? 'true' : 'false',
    'memory_limit'      => ServerUtils::formatBytes(ServerUtils::getMaxMemory()),
    'memory_usage'      => ServerUtils::formatBytes(ServerUtils::getMemoryUsage()),
    'memory_peak_usage' => ServerUtils::formatBytes(ServerUtils::getPeakMemoryUsage()),
    'trusted_hosts'     => $trustedHosts,
    'trusted_proxies'   => $trustedProxies,
    'request_limit'     => $requestLimit,
]);

$driver->boot($trustedHosts, $trustedProxies);
$server->start();
